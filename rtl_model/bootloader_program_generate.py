#!/usr/bin/env python3
#Author: Robert Markl
#This program converts to bootloader hex-code into a
#VHDL source code file which contains the BOOTLOADER_MEM constant.
#
#USAGE: bootloader_generate_program.py
#           [bootloader_program.hex] [bootloader_program_pack.vhd]

import os.path
import sys

path_hex = "bootloader_program.hex"
path_vhd = "bootloader_program_pack.vhd"

if len(sys.argv) > 1:
	path_asm = sys.argv[1]

if len(sys.argv) > 2:
	path_vhd = sys.argv[2]	

if os.path.exists(path_hex) == False:
    print("Could not find bootloader hex-file")
    sys.exit(1)

try:
    file_vhd = open(path_vhd, 'w')

    #write file header
    file_vhd.write(
"--Bootoader_program_pack contains the BOOTLOADER_MEM constant\n"+
"-- The bootloader is saved in the BOOTLOADER_MEM constant at the end of memory\n"+
"-- This file is auto generated by a python script: bootloader_generate_program.py "+
"[bootloader_program.hex] [bootloader_program_pack.vhd]\n\n"
"use WORK.cpu_defs_pack.all;\n"+
"package bootloader_program_pack is\n"+
"constant BOOTLOADER_MEM : RAM :=    (\n");
    
    
    with open(path_hex) as file_hex:
        i = 0
        for line in file_hex:
            binary_str = bin(int(line, 16))[2:].zfill(12)
            binary_str = binary_str[0:6]+"_"+binary_str[6:8]+"_"+binary_str[8:10]+"_"+binary_str[10:12]
            file_vhd.write(
"                                      {0}      => B\"{1}\",\n".format(i, binary_str))
            i = i+1

    #write file footer
    file_vhd.write(
"                                      others    => B\"000000_00_00_00\"\n"+
"                                     );\n"+
"\n"+
"end bootloader_program_pack;\n--EOF\n");
            
    file_vhd.close()
    print("End success")
    sys.exit(0)
except IOError as e:
    print ("I/O error({0}): {1}".format(e.errno, e.strerror))
    sys.exit(1)
except Exception as e:
    print ("Unknown error ", e)
    sys.exit(1)
